# Place all functions below
function r_l_test { ./node_modules/.bin/jest -u __tests__/roleLibrary/$1; }

function rebase_branch {
   git reset HEAD~;
   git clean -fd;
   git stash push -m "$(date)"
   branch=$(git rev-parse --abbrev-ref HEAD)
   git pull origin $branch

}

# GIT FUNCTIONS

function gs { git status; }

function base_project_path { cd ~/vscode; }

function base_react_path { cd ~/vscode/www/react; }

function gcm {
   git commit -m "$1"
}

function grb {
   curr_branch=$(git rev-parse --abbrev-ref HEAD)
   git checkout $1
   branch_new=$(git rev-parse --abbrev-ref HEAD)
   if [[ $branch_new == $curr_branch ]]; then
      return
   fi
   gull
   git checkout $curr_branch
}

function gush {
   branch=$(git rev-parse --abbrev-ref HEAD)
   echo "push origin $branch"
   git push origin $branch
}

function gull {
   branch=$(git rev-parse --abbrev-ref HEAD)
   echo "pull origin $branch"
   git pull origin $branch
}

function ga_pro {
   CYAN='\033[0;36m'
   NC='\033[0m' # No Color
   i=0
   while read line ; do 
      i=$(( i + 1 ))
      echo "$i) $line"
   done < <(git ls-files -m)

   
   while true; do
      read -p "Select (multi comma separated)? " vals
      IFS=',' read -r -a array <<< "$vals"
      files=()
      for num in  "${array[@]}"; do
         file=$(git_pos $num)
         files+=($file)
      done
      for f in "${files[@]}"; do
         ga $f
      done
      break;
   done
}

function ga {
   ORANGE='\033[0;33m'
   GREEN='\033[0;32m'
   NC='\033[0m' # No Color
   local f="$1"
   if [[ $1 =~ ^-?[0-9]+$ ]]; then
      f=$(git_pos $1)
   fi
   base_project_path
   if [[ $f == *.js ]]; then
      echo -e "${ORANGE}ES Linting: $f${NC}"
      base_react_path
      REL_FILE="$(echo "$f" | cut -d'/' -f3-)"
      ./node_modules/.bin/eslint --fix --color "$REL_FILE" | tee /tmp/eslint.out 2> /dev/null
      STATUS=( "${PIPESTATUS[@]}" )
      if [[ $STATUS -ne 0 && $STATUS -ne 139 && $STATUS -ne 124 && $STATUS -ne 137 ]]; then
         echo "Linting error"
         return
      fi
   fi

   if [[ $f == *.py ]]; then
      echo -e "${ORANGE}Py Linting: $file${NC}"
      py2lint $f | tee /tmp/py2lint.out 2> /dev/null
      STATUS=( "${PIPESTATUS[@]}" ) 
      if [[ `grep wrong-import-order /tmp/py2lint.out` || `grep ungrouped-imports /tmp/py2lint.out`  ]]; then
         if [[ ! `which reorder-python-imports` ]]; then
         pip install reorder-python-imports
         fi 
         echo Running reorder-python-imports on $f
         reorder-python-imports "$BASEDIR/$f" --application-directories "$BASEDIR/www"
      fi
      if [[ `grep unused-import /tmp/py2lint.out` ]]; then
         if [[ ! `which autoflake` ]]; then
         pip install autoflake
         fi 
         echo Running remove-unused-imports on $f
         autoflake --in-place --remove-all-unused-imports "$BASEDIR/$f"
      fi
      if [[ $STATUS -ne 0 && $STATUS -ne 139 && $STATUS -ne 124 && $STATUS -ne 137 ]]; then
         echo "Linting error"
         return
      fi
   fi
   base_project_path
   echo -e "${GREEN}git add $f${NC}"
   git add $f
}

function gd {
   local file="$1"
   if [[ $1 =~ ^-?[0-9]+$ ]]; then
      file=$(git_pos $1)
   fi
   git diff $file
}

function git_pos {
   regex="modified:[ ]*(.*?)"
   i=0
   git ls-files -m | while read line ;
   do 
      i=$(( i + 1 ))
      if [ $i == $1 ]; then
         echo $line
         return 1         
      fi
   done 
}

function ga_z {
   local file="$1"
   if [[ $1 =~ ^-?[0-9]+$ ]]; then
      file=$(git_pos $1)
   fi
   echo -e "${GREEN}git add $file${NC}"
   git add $file
}
